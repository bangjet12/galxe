// Copyright 2020-2024 Manta Network.
// This file is part of Manta.
//
// Manta is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Manta is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Manta.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_lottery
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-05-20, STEPS: `50`, REPEAT: 40, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("/home/aye/actions-runner/_worker/Manta/Manta/tests/data/fork.json"), DB CACHE: 1024

// Executed Command:
// ./target/production/manta
// benchmark
// pallet
// --chain=/home/aye/actions-runner/_worker/Manta/Manta/tests/data/fork.json
// --steps=50
// --repeat=40
// --pallet=pallet_lottery
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./scripts/benchmarking/frame-weights-output/pallet_lottery.rs
// --template=.github/resources/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_lottery.
pub trait WeightInfo {
	fn deposit(x: u32, y: u32, ) -> Weight;
	fn request_withdraw(x: u32, y: u32, ) -> Weight;
	fn claim_my_winnings(y: u32, ) -> Weight;
	fn start_lottery() -> Weight;
	fn stop_lottery() -> Weight;
	fn draw_lottery(x: u32, y: u32, ) -> Weight;
	fn process_matured_withdrawals() -> Weight;
	fn set_min_deposit() -> Weight;
	fn set_min_withdraw() -> Weight;
	fn set_gas_reserve() -> Weight;
}

/// Weights for pallet_lottery using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_lottery::WeightInfo for SubstrateWeight<T> {
	/// Storage: `Lottery::MinDeposit` (r:1 w:0)
	/// Proof: `Lottery::MinDeposit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Scheduler::Lookup` (r:1 w:0)
	/// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Lottery::FarmingParameters` (r:1 w:0)
	/// Proof: `Lottery::FarmingParameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::SelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::SelectedCandidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::UnstakingCollators` (r:1 w:0)
	/// Proof: `Lottery::UnstakingCollators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::StakedCollators` (r:2 w:1)
	/// Proof: `Lottery::StakedCollators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::TotalUnclaimedWinnings` (r:1 w:0)
	/// Proof: `Lottery::TotalUnclaimedWinnings` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::UnlockedUnstakingFunds` (r:1 w:0)
	/// Proof: `Lottery::UnlockedUnstakingFunds` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TransactionPayment::NextFeeMultiplier` (r:1 w:0)
	/// Proof: `TransactionPayment::NextFeeMultiplier` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::ActiveBalancePerUser` (r:1 w:1)
	/// Proof: `Lottery::ActiveBalancePerUser` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::TotalPot` (r:1 w:1)
	/// Proof: `Lottery::TotalPot` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::TotalUsers` (r:1 w:1)
	/// Proof: `Lottery::TotalUsers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::SumOfDeposits` (r:1 w:1)
	/// Proof: `Lottery::SumOfDeposits` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 1000]`.
	/// The range of component `y` is `[0, 63]`.
	fn deposit(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3459 + x * (1 ±0) + y * (72 ±0)`
		//  Estimated: `8716 + x * (2 ±0) + y * (79 ±0)`
		// Minimum execution time: 197_635_000 picoseconds.
		Weight::from_parts(221_869_681, 8716)
			// Standard Error: 1_801
			.saturating_add(Weight::from_parts(169_554, 0).saturating_mul(x.into()))
			// Standard Error: 28_381
			.saturating_add(Weight::from_parts(210_063, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(24_u64))
			.saturating_add(T::DbWeight::get().writes(13_u64))
			.saturating_add(Weight::from_parts(0, 2).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 79).saturating_mul(y.into()))
	}
	/// Storage: `Lottery::MinWithdraw` (r:1 w:0)
	/// Proof: `Lottery::MinWithdraw` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Scheduler::Lookup` (r:1 w:0)
	/// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Lottery::FarmingParameters` (r:1 w:0)
	/// Proof: `Lottery::FarmingParameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::ActiveBalancePerUser` (r:1 w:1)
	/// Proof: `Lottery::ActiveBalancePerUser` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::WithdrawalRequestQueue` (r:1 w:1)
	/// Proof: `Lottery::WithdrawalRequestQueue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::TotalUsers` (r:1 w:1)
	/// Proof: `Lottery::TotalUsers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::TotalPot` (r:1 w:1)
	/// Proof: `Lottery::TotalPot` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::SurplusUnstakingBalance` (r:1 w:1)
	/// Proof: `Lottery::SurplusUnstakingBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::StakedCollators` (r:2 w:0)
	/// Proof: `Lottery::StakedCollators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::UnstakingCollators` (r:1 w:1)
	/// Proof: `Lottery::UnstakingCollators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::SelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::SelectedCandidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TransactionPayment::NextFeeMultiplier` (r:1 w:0)
	/// Proof: `TransactionPayment::NextFeeMultiplier` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Lottery::TotalUnclaimedWinnings` (r:1 w:0)
	/// Proof: `Lottery::TotalUnclaimedWinnings` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::UnlockedUnstakingFunds` (r:1 w:0)
	/// Proof: `Lottery::UnlockedUnstakingFunds` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 1000]`.
	/// The range of component `y` is `[0, 63]`.
	fn request_withdraw(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2216 + x * (1 ±0)`
		//  Estimated: `7719 + x * (1 ±0) + y * (5 ±0)`
		// Minimum execution time: 92_963_000 picoseconds.
		Weight::from_parts(100_727_932, 7719)
			// Standard Error: 778
			.saturating_add(Weight::from_parts(93_297, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(18_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 5).saturating_mul(y.into()))
	}
	/// Storage: `Lottery::UnclaimedWinningsByAccount` (r:1 w:1)
	/// Proof: `Lottery::UnclaimedWinningsByAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Lottery::SumOfDeposits` (r:1 w:0)
	/// Proof: `Lottery::SumOfDeposits` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::TotalUnclaimedWinnings` (r:1 w:1)
	/// Proof: `Lottery::TotalUnclaimedWinnings` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `y` is `[0, 63]`.
	fn claim_my_winnings(y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `694 + y * (5 ±0)`
		//  Estimated: `6196 + y * (6 ±0)`
		// Minimum execution time: 58_580_000 picoseconds.
		Weight::from_parts(62_544_697, 6196)
			// Standard Error: 1_964
			.saturating_add(Weight::from_parts(122_638, 0).saturating_mul(y.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(y.into()))
	}
	/// Storage: `Scheduler::Lookup` (r:1 w:1)
	/// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::TotalUnclaimedWinnings` (r:1 w:0)
	/// Proof: `Lottery::TotalUnclaimedWinnings` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::UnlockedUnstakingFunds` (r:1 w:0)
	/// Proof: `Lottery::UnlockedUnstakingFunds` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::GasReserve` (r:1 w:0)
	/// Proof: `Lottery::GasReserve` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Scheduler::Agenda` (r:1 w:1)
	/// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(38963), added: 41438, mode: `MaxEncodedLen`)
	fn start_lottery() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `324`
		//  Estimated: `42428`
		// Minimum execution time: 29_813_000 picoseconds.
		Weight::from_parts(30_583_000, 42428)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `Scheduler::Lookup` (r:1 w:1)
	/// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Scheduler::Agenda` (r:1 w:1)
	/// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(38963), added: 41438, mode: `MaxEncodedLen`)
	fn stop_lottery() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `162`
		//  Estimated: `42428`
		// Minimum execution time: 20_287_000 picoseconds.
		Weight::from_parts(20_848_000, 42428)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::TotalUnclaimedWinnings` (r:1 w:1)
	/// Proof: `Lottery::TotalUnclaimedWinnings` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::UnlockedUnstakingFunds` (r:1 w:0)
	/// Proof: `Lottery::UnlockedUnstakingFunds` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::GasReserve` (r:1 w:0)
	/// Proof: `Lottery::GasReserve` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::TotalPot` (r:1 w:0)
	/// Proof: `Lottery::TotalPot` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::SumOfDeposits` (r:1 w:0)
	/// Proof: `Lottery::SumOfDeposits` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::ActiveBalancePerUser` (r:516 w:0)
	/// Proof: `Lottery::ActiveBalancePerUser` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::UnclaimedWinningsByAccount` (r:1 w:1)
	/// Proof: `Lottery::UnclaimedWinningsByAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::UnstakingCollators` (r:1 w:0)
	/// Proof: `Lottery::UnstakingCollators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::WithdrawalRequestQueue` (r:1 w:0)
	/// Proof: `Lottery::WithdrawalRequestQueue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::MinDeposit` (r:1 w:0)
	/// Proof: `Lottery::MinDeposit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 1000]`.
	/// The range of component `y` is `[0, 63]`.
	fn draw_lottery(x: u32, _y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1665 + x * (30 ±0)`
		//  Estimated: `259887 + x * (1112 ±25)`
		// Minimum execution time: 62_846_000 picoseconds.
		Weight::from_parts(465_363_946, 259887)
			// Standard Error: 43_256
			.saturating_add(Weight::from_parts(2_010_029, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(112_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 1112).saturating_mul(x.into()))
	}
	/// Storage: `Lottery::UnstakingCollators` (r:1 w:0)
	/// Proof: `Lottery::UnstakingCollators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::WithdrawalRequestQueue` (r:1 w:0)
	/// Proof: `Lottery::WithdrawalRequestQueue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::UnlockedUnstakingFunds` (r:1 w:0)
	/// Proof: `Lottery::UnlockedUnstakingFunds` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::MinDeposit` (r:1 w:0)
	/// Proof: `Lottery::MinDeposit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn process_matured_withdrawals() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `238`
		//  Estimated: `1723`
		// Minimum execution time: 9_469_000 picoseconds.
		Weight::from_parts(9_628_000, 1723)
			.saturating_add(T::DbWeight::get().reads(4_u64))
	}
	/// Storage: `Lottery::MinWithdraw` (r:1 w:0)
	/// Proof: `Lottery::MinWithdraw` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::MinDeposit` (r:0 w:1)
	/// Proof: `Lottery::MinDeposit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_min_deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `216`
		//  Estimated: `1701`
		// Minimum execution time: 6_011_000 picoseconds.
		Weight::from_parts(6_204_000, 1701)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Lottery::MinWithdraw` (r:0 w:1)
	/// Proof: `Lottery::MinWithdraw` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_min_withdraw() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_500_000 picoseconds.
		Weight::from_parts(2_684_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Lottery::GasReserve` (r:0 w:1)
	/// Proof: `Lottery::GasReserve` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_gas_reserve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_590_000 picoseconds.
		Weight::from_parts(2_764_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `Lottery::MinDeposit` (r:1 w:0)
	/// Proof: `Lottery::MinDeposit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Scheduler::Lookup` (r:1 w:0)
	/// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Lottery::FarmingParameters` (r:1 w:0)
	/// Proof: `Lottery::FarmingParameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::SelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::SelectedCandidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::UnstakingCollators` (r:1 w:0)
	/// Proof: `Lottery::UnstakingCollators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::StakedCollators` (r:2 w:1)
	/// Proof: `Lottery::StakedCollators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::TotalUnclaimedWinnings` (r:1 w:0)
	/// Proof: `Lottery::TotalUnclaimedWinnings` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::UnlockedUnstakingFunds` (r:1 w:0)
	/// Proof: `Lottery::UnlockedUnstakingFunds` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TransactionPayment::NextFeeMultiplier` (r:1 w:0)
	/// Proof: `TransactionPayment::NextFeeMultiplier` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Balances::Locks` (r:1 w:1)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
	/// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	/// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::Total` (r:1 w:1)
	/// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::ActiveBalancePerUser` (r:1 w:1)
	/// Proof: `Lottery::ActiveBalancePerUser` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::TotalPot` (r:1 w:1)
	/// Proof: `Lottery::TotalPot` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::TotalUsers` (r:1 w:1)
	/// Proof: `Lottery::TotalUsers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::SumOfDeposits` (r:1 w:1)
	/// Proof: `Lottery::SumOfDeposits` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 1000]`.
	/// The range of component `y` is `[0, 63]`.
	fn deposit(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3459 + x * (1 ±0) + y * (72 ±0)`
		//  Estimated: `8716 + x * (2 ±0) + y * (79 ±0)`
		// Minimum execution time: 197_635_000 picoseconds.
		Weight::from_parts(221_869_681, 8716)
			// Standard Error: 1_801
			.saturating_add(Weight::from_parts(169_554, 0).saturating_mul(x.into()))
			// Standard Error: 28_381
			.saturating_add(Weight::from_parts(210_063, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(24_u64))
			.saturating_add(RocksDbWeight::get().writes(13_u64))
			.saturating_add(Weight::from_parts(0, 2).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 79).saturating_mul(y.into()))
	}
	/// Storage: `Lottery::MinWithdraw` (r:1 w:0)
	/// Proof: `Lottery::MinWithdraw` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Scheduler::Lookup` (r:1 w:0)
	/// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Lottery::FarmingParameters` (r:1 w:0)
	/// Proof: `Lottery::FarmingParameters` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::ActiveBalancePerUser` (r:1 w:1)
	/// Proof: `Lottery::ActiveBalancePerUser` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::WithdrawalRequestQueue` (r:1 w:1)
	/// Proof: `Lottery::WithdrawalRequestQueue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::TotalUsers` (r:1 w:1)
	/// Proof: `Lottery::TotalUsers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::TotalPot` (r:1 w:1)
	/// Proof: `Lottery::TotalPot` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::SurplusUnstakingBalance` (r:1 w:1)
	/// Proof: `Lottery::SurplusUnstakingBalance` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::StakedCollators` (r:2 w:0)
	/// Proof: `Lottery::StakedCollators` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::UnstakingCollators` (r:1 w:1)
	/// Proof: `Lottery::UnstakingCollators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::SelectedCandidates` (r:1 w:0)
	/// Proof: `ParachainStaking::SelectedCandidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TransactionPayment::NextFeeMultiplier` (r:1 w:0)
	/// Proof: `TransactionPayment::NextFeeMultiplier` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Lottery::TotalUnclaimedWinnings` (r:1 w:0)
	/// Proof: `Lottery::TotalUnclaimedWinnings` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::UnlockedUnstakingFunds` (r:1 w:0)
	/// Proof: `Lottery::UnlockedUnstakingFunds` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
	/// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 1000]`.
	/// The range of component `y` is `[0, 63]`.
	fn request_withdraw(x: u32, y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2216 + x * (1 ±0)`
		//  Estimated: `7719 + x * (1 ±0) + y * (5 ±0)`
		// Minimum execution time: 92_963_000 picoseconds.
		Weight::from_parts(100_727_932, 7719)
			// Standard Error: 778
			.saturating_add(Weight::from_parts(93_297, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(18_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(x.into()))
			.saturating_add(Weight::from_parts(0, 5).saturating_mul(y.into()))
	}
	/// Storage: `Lottery::UnclaimedWinningsByAccount` (r:1 w:1)
	/// Proof: `Lottery::UnclaimedWinningsByAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Lottery::SumOfDeposits` (r:1 w:0)
	/// Proof: `Lottery::SumOfDeposits` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::TotalUnclaimedWinnings` (r:1 w:1)
	/// Proof: `Lottery::TotalUnclaimedWinnings` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `y` is `[0, 63]`.
	fn claim_my_winnings(y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `694 + y * (5 ±0)`
		//  Estimated: `6196 + y * (6 ±0)`
		// Minimum execution time: 58_580_000 picoseconds.
		Weight::from_parts(62_544_697, 6196)
			// Standard Error: 1_964
			.saturating_add(Weight::from_parts(122_638, 0).saturating_mul(y.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
			.saturating_add(Weight::from_parts(0, 6).saturating_mul(y.into()))
	}
	/// Storage: `Scheduler::Lookup` (r:1 w:1)
	/// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::TotalUnclaimedWinnings` (r:1 w:0)
	/// Proof: `Lottery::TotalUnclaimedWinnings` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::UnlockedUnstakingFunds` (r:1 w:0)
	/// Proof: `Lottery::UnlockedUnstakingFunds` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::GasReserve` (r:1 w:0)
	/// Proof: `Lottery::GasReserve` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Scheduler::Agenda` (r:1 w:1)
	/// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(38963), added: 41438, mode: `MaxEncodedLen`)
	fn start_lottery() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `324`
		//  Estimated: `42428`
		// Minimum execution time: 29_813_000 picoseconds.
		Weight::from_parts(30_583_000, 42428)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `Scheduler::Lookup` (r:1 w:1)
	/// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `Scheduler::Agenda` (r:1 w:1)
	/// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(38963), added: 41438, mode: `MaxEncodedLen`)
	fn stop_lottery() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `162`
		//  Estimated: `42428`
		// Minimum execution time: 20_287_000 picoseconds.
		Weight::from_parts(20_848_000, 42428)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
	/// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::TotalUnclaimedWinnings` (r:1 w:1)
	/// Proof: `Lottery::TotalUnclaimedWinnings` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::UnlockedUnstakingFunds` (r:1 w:0)
	/// Proof: `Lottery::UnlockedUnstakingFunds` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::GasReserve` (r:1 w:0)
	/// Proof: `Lottery::GasReserve` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::TotalPot` (r:1 w:0)
	/// Proof: `Lottery::TotalPot` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::SumOfDeposits` (r:1 w:0)
	/// Proof: `Lottery::SumOfDeposits` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::ActiveBalancePerUser` (r:516 w:0)
	/// Proof: `Lottery::ActiveBalancePerUser` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::UnclaimedWinningsByAccount` (r:1 w:1)
	/// Proof: `Lottery::UnclaimedWinningsByAccount` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::UnstakingCollators` (r:1 w:0)
	/// Proof: `Lottery::UnstakingCollators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::WithdrawalRequestQueue` (r:1 w:0)
	/// Proof: `Lottery::WithdrawalRequestQueue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::MinDeposit` (r:1 w:0)
	/// Proof: `Lottery::MinDeposit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[0, 1000]`.
	/// The range of component `y` is `[0, 63]`.
	fn draw_lottery(x: u32, _y: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1665 + x * (30 ±0)`
		//  Estimated: `259887 + x * (1112 ±25)`
		// Minimum execution time: 62_846_000 picoseconds.
		Weight::from_parts(465_363_946, 259887)
			// Standard Error: 43_256
			.saturating_add(Weight::from_parts(2_010_029, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(112_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(Weight::from_parts(0, 1112).saturating_mul(x.into()))
	}
	/// Storage: `Lottery::UnstakingCollators` (r:1 w:0)
	/// Proof: `Lottery::UnstakingCollators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::WithdrawalRequestQueue` (r:1 w:0)
	/// Proof: `Lottery::WithdrawalRequestQueue` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::UnlockedUnstakingFunds` (r:1 w:0)
	/// Proof: `Lottery::UnlockedUnstakingFunds` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::MinDeposit` (r:1 w:0)
	/// Proof: `Lottery::MinDeposit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn process_matured_withdrawals() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `238`
		//  Estimated: `1723`
		// Minimum execution time: 9_469_000 picoseconds.
		Weight::from_parts(9_628_000, 1723)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
	}
	/// Storage: `Lottery::MinWithdraw` (r:1 w:0)
	/// Proof: `Lottery::MinWithdraw` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Lottery::MinDeposit` (r:0 w:1)
	/// Proof: `Lottery::MinDeposit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_min_deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `216`
		//  Estimated: `1701`
		// Minimum execution time: 6_011_000 picoseconds.
		Weight::from_parts(6_204_000, 1701)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Lottery::MinWithdraw` (r:0 w:1)
	/// Proof: `Lottery::MinWithdraw` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_min_withdraw() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_500_000 picoseconds.
		Weight::from_parts(2_684_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Lottery::GasReserve` (r:0 w:1)
	/// Proof: `Lottery::GasReserve` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_gas_reserve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_590_000 picoseconds.
		Weight::from_parts(2_764_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
